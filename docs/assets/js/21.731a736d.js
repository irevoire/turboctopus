(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{443:function(e,t,a){"use strict";a.r(t);var s=a(62),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("ul",[a("li",[e._v("Title: Phrase Query")]),e._v(" "),a("li",[e._v("Start Date: 2021-06-02")]),e._v(" "),a("li",[e._v("Specification PR: "),a("a",{attrs:{href:"https://github.com/meilisearch/specifications/pull/43",target:"_blank",rel:"noopener noreferrer"}},[e._v("#43"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("MeiliSearch Tracking-Issues: "),a("a",{attrs:{href:"https://github.com/meilisearch/transplant/issues/198",target:"_blank",rel:"noopener noreferrer"}},[e._v("transplant/#198"),a("OutboundLink")],1)])]),e._v(" "),a("h1",{attrs:{id:"phrase-query"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#phrase-query"}},[e._v("#")]),e._v(" Phrase Query")]),e._v(" "),a("h2",{attrs:{id:"_1-feature-description-and-interaction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-feature-description-and-interaction"}},[e._v("#")]),e._v(" 1. Feature Description and Interaction")]),e._v(" "),a("h3",{attrs:{id:"i-summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i-summary"}},[e._v("#")]),e._v(" I. Summary")]),e._v(" "),a("p",[e._v("MeiliSearch does not allow users a way to write a strict query in order to ask the engine to be more strict in its selection of candidates for search results. The Phrase Query feature adds a simple syntax available to users to require the engine to select documents that strictly match some phrase, indicated by quotation marks. That is, without typography, n-gram, wordsplit, prefix, synonym, and, proximity. In addition, the expression of a Phrase Query is case insensitive.")]),e._v(" "),a("h3",{attrs:{id:"ii-motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ii-motivation"}},[e._v("#")]),e._v(" II. Motivation")]),e._v(" "),a("p",[e._v("This feature is driven by the user's needs. Indeed, let's take some examples recently brought up in our community Slack.")]),e._v(" "),a("h4",{attrs:{id:"example-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-1"}},[e._v("#")]),e._v(" Example 1")]),e._v(" "),a("p",[e._v("The user wants to have a way to ensure that the words of his search are exactly contained in the order of the terms in the documents returned by MeiliSearch.")]),e._v(" "),a("h4",{attrs:{id:"example-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-2"}},[e._v("#")]),e._v(" Example 2")]),e._v(" "),a("p",[e._v("The user in question would like to be able to retrieve specifically the document containing the unique ISBN identifier and only that one. In a UX context of type as you search, this is impossible today without impacting the UI/UX or finding a workaround.")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("It could have had a specific search field only dedicated to this ISBN field in order to make it a filter and using the "),a("code",[e._v("=")]),e._v(" operator. Not great for the UX.")])]),e._v(" "),a("li",[a("p",[e._v("It could also have kept a single search field and detected that an ISBN was entered in the search field using a regex to inject that filter at that point. Not great for the developper experience, moreover, what happens when a pattern cannot be specifically determined?")])])]),e._v(" "),a("p",[e._v("The Phrase Query feature will easily solve the last case but will also adapt to the needs of the user performing the search.")]),e._v(" "),a("h3",{attrs:{id:"iii-additional-materials"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iii-additional-materials"}},[e._v("#")]),e._v(" III. Additional Materials")]),e._v(" "),a("h4",{attrs:{id:"algolia"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#algolia"}},[e._v("#")]),e._v(" Algolia")]),e._v(" "),a("p",[e._v("Algolia allows the use of Phrase Query syntax as long as the "),a("code",[e._v("advancedSyntax")]),e._v(" parameter is set to true in the settings.")]),e._v(" "),a("p",[e._v('As Algolia documentation said, a phrase query represents a specific sequence of terms that must be matched next to one another and in the given order. A phrase query needs to be surrounded by double quotes ("). For example, the query "search engine" only returns a record if it contains “search engine” exactly in at least one attribute.')]),e._v(" "),a("h4",{attrs:{id:"elasticsearch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch"}},[e._v("#")]),e._v(" Elasticsearch")]),e._v(" "),a("p",[e._v("Elasticsearch provides a "),a("code",[e._v("match_phrase")]),e._v(" field to perform this type of search.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('GET /_search\n{\n  "query": {\n    "match_phrase": {\n      "message": "this is a test"\n    }\n  }\n}\n')])])]),a("h3",{attrs:{id:"iv-explanation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iv-explanation"}},[e._v("#")]),e._v(" IV. Explanation")]),e._v(" "),a("p",[e._v("Let's say I want to search for a specific book with a title strictly containing "),a("code",[e._v("Plays and Playwrights 2002")]),e._v(".")]),e._v(" "),a("p",[e._v("Using the standard query parameter syntax as "),a("code",[e._v("q")]),e._v(" equals to "),a("code",[e._v("Plays and Playwrights 2002")]),e._v(", will lead to have multiple search results because of the ranking rules criterions.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n    "hits": [\n        {\n            "title": "Plays and Playwrights 2002",\n            "author": "Martin Denton"\n        },\n        {\n            "title": "Plays and Playwrights 2009",\n            "author": "Martin Denton"\n        },\n        {\n            "title": "Plays and Playwrights 2008",\n            "author": "Robert Attweiler"\n        },\n        ...\n        {\n            "title": "The Best American Short Plays 2006-2007",\n            "author": "Barbara Parisi"\n        },\n        {\n            "title": "New Playwrights: The Best Plays of 2000",\n            "author": "D. L. Lepidus"\n        },\n        {\n            "title": "Women Heroes: Six Short Plays from the Women\'s Project",\n            "author": "Julia Miles"\n        }\n    ],\n    "nbHits": 31,\n    "exhaustiveNbHits": false,\n    "query": "Plays and Playwrights 2002",\n    "limit": 20,\n    "offset": 0,\n    "processingTimeMs": 7\n}\n')])])]),a("h4",{attrs:{id:"phrase-query-usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#phrase-query-usage"}},[e._v("#")]),e._v(" Phrase Query usage")]),e._v(" "),a("p",[e._v("To use the Phrase Query syntax, simply surround the contiguous search terms with the characters "),a("code",[e._v('"')]),e._v(".")]),e._v(" "),a("p",[e._v("Using the Phrase Query syntax this way, with "),a("code",[e._v("q")]),e._v(" equals to "),a("code",[e._v('"Plays and Playwrights 2002"')]),e._v(", will lead to have only one result because the title is written exactly like that.")]),e._v(" "),a("blockquote",[a("p",[e._v("Note that it's case insensitive. So, if I search with "),a("code",[e._v('"plays and playwrights 2002"')]),e._v(", this will lead to the same result.")])]),e._v(" "),a("p",[e._v("The value between the "),a("code",[e._v('"')]),e._v(" operators will be searched without:")]),e._v(" "),a("ul",[a("li",[e._v("typography")]),e._v(" "),a("li",[e._v("n-gram")]),e._v(" "),a("li",[e._v("wordsplit")]),e._v(" "),a("li",[e._v("prefix")]),e._v(" "),a("li",[e._v("synonym")]),e._v(" "),a("li",[e._v("proximity")])]),e._v(" "),a("p",[e._v("Moreover, it ensures that all matching documents contain the words in the given order in the Phrase.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n    "hits": [\n        {\n            "title": "Plays and Playwrights 2002",\n            "author": "Martin Denton"\n        }\n    ],\n    "nbHits": 1,\n    "exhaustiveNbHits": false,\n    "query": "\\"Plays and Playwrights 2002\\"",\n    "limit": 20,\n    "offset": 0,\n    "processingTimeMs": 0\n}\n')])])]),a("p",[e._v("So now let's say that I want to search for a title that strictly includes the phrase "),a("code",[e._v('"African American"')]),e._v(" but speaking about poetry. The Phrase Query syntax can be used in conjunction with the basic syntax.")]),e._v(" "),a("p",[e._v("The query can be expressed like this: "),a("code",[e._v('"African American" poem')])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n    "hits": [\n        {\n            "title": "100 Best African American Poems with CD",\n            "author": "Nikki Giovanni"\n        },\n        {\n            "title": "The African American Experience: Black History and Culture Through Speeches, Letters, Editorials, Poems, Songs, and Stories",\n            "author": "Kai Wright"\n        },\n        {\n            "title": "African American Literature (Penguin Academics Series)",\n            "author": "Keith Gilyard"\n        },\n        {\n            "title": "African-American Poetry: An Anthology, 1773-1930",\n            "author": "Joan R. Sherman"\n        },\n        {\n            "title": "African-American Literature: A Brief Introduction and Anthology",\n            "author": "Al Young"\n        },\n        {\n            "title": "Early African American Classics (Barnes &amp; Noble Classics Series)",\n            "author": "Barnes &amp; Noble"\n        },\n')])])]),a("p",[e._v("As you can see in the results, the presence or absence of one or more soft separators such as "),a("code",[e._v("-")]),e._v(", "),a("code",[e._v("_")]),e._v(", "),a("code",[e._v("\\")]),e._v(", "),a("code",[e._v(":")]),e._v(", "),a("code",[e._v("/")]),e._v(", "),a("code",[e._v("\\\\")]),e._v(", "),a("code",[e._v("@")]),e._v(", "),a("code",[e._v('"')]),e._v(", "),a("code",[e._v("+")]),e._v(", "),a("code",[e._v("~")]),e._v(", "),a("code",[e._v("=")]),e._v(", "),a("code",[e._v("^")]),e._v(", "),a("code",[e._v("*")]),e._v(", "),a("code",[e._v("#")]),e._v(" between two words does not affect the query match of the phrase and the document.")]),e._v(" "),a("h4",{attrs:{id:"multiple-phrase-query-usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multiple-phrase-query-usage"}},[e._v("#")]),e._v(" Multiple Phrase Query usage")]),e._v(" "),a("p",[e._v("It is possible to use multiple phrase queries within a search.")]),e._v(" "),a("p",[e._v("E.g. "),a("code",[e._v('"African American" "Anthology"')])]),e._v(" "),a("p",[e._v("With this expression, the returned documents will contain exactly the existence of both phrase queries.")]),e._v(" "),a("h4",{attrs:{id:"know-limitations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#know-limitations"}},[e._v("#")]),e._v(" Know limitations")]),e._v(" "),a("h5",{attrs:{id:"case-sensivity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#case-sensivity"}},[e._v("#")]),e._v(" Case Sensivity")]),e._v(" "),a("p",[e._v("The Phrase Query syntax is case insensitive.")]),e._v(" "),a("h5",{attrs:{id:"multiple-hard-separator-case"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multiple-hard-separator-case"}},[e._v("#")]),e._v(" Multiple hard separator case")]),e._v(" "),a("p",[e._v("Given a document containing "),a("code",[e._v("David.- .- .- .- .-Bowie")]),e._v(" as value for an attribute.")]),e._v(" "),a("p",[e._v("This document can be matched using a phrase query such as "),a("code",[e._v('"David" "Bowie"')]),e._v(" or "),a("code",[e._v('"David.Bowie"')]),e._v(". At the engine level, this is the same query. The latter is translated into the former phrase because the "),a("code",[e._v(".")]),e._v(" character is a hard separator. This behavior comes from the default tokenizer, hard separators are seen as a marker for a different context or phrase.")]),e._v(" "),a("p",[e._v("Here is the list of hard separators in the default tokenizer: "),a("code",[e._v(".")]),e._v(", "),a("code",[e._v(";")]),e._v(", "),a("code",[e._v(",")]),e._v(", "),a("code",[e._v("!")]),e._v(", "),a("code",[e._v("?")]),e._v(", "),a("code",[e._v("(")]),e._v(", "),a("code",[e._v(")")]),e._v(", "),a("code",[e._v("[")]),e._v(", "),a("code",[e._v("]")]),e._v(", "),a("code",[e._v("{")]),e._v(", "),a("code",[e._v("}")]),e._v(", "),a("code",[e._v("|")])]),e._v(" "),a("p",[e._v("Multiple hard separator are treaten the same as if they were one. So "),a("code",[e._v('"David.-.-.-.Bowie"')]),e._v(" will not work to match the document.")]),e._v(" "),a("h3",{attrs:{id:"v-impact-on-documentation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-impact-on-documentation"}},[e._v("#")]),e._v(" V. Impact on Documentation")]),e._v(" "),a("ul",[a("li",[e._v("Mention that new Phrase Query syntax in the documentation. Can it be on a dedicated page or on "),a("a",{attrs:{href:"https://docs.meilisearch.com/reference/features/search_parameters.html#query-q",target:"_blank",rel:"noopener noreferrer"}},[e._v("the q search parameter"),a("OutboundLink")],1),e._v("?")])]),e._v(" "),a("h3",{attrs:{id:"vi-impact-on-sdks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vi-impact-on-sdks"}},[e._v("#")]),e._v(" VI. Impact on SDKs")]),e._v(" "),a("p",[e._v("N/A")]),e._v(" "),a("h2",{attrs:{id:"_2-technical-aspects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-technical-aspects"}},[e._v("#")]),e._v(" 2. Technical Aspects")]),e._v(" "),a("p",[e._v("N/A")]),e._v(" "),a("h2",{attrs:{id:"_3-future-possibilities"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-future-possibilities"}},[e._v("#")]),e._v(" 3. Future Possibilities")]),e._v(" "),a("p",[e._v("N/A")])])}),[],!1,null,null,null);t.default=r.exports}}]);