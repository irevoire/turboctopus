(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{456:function(e,t,a){"use strict";a.r(t);var s=a(62),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("ul",[a("li",[e._v("Title: Tenant Tokens")])]),e._v(" "),a("h1",{attrs:{id:"tenant-tokens"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tenant-tokens"}},[e._v("#")]),e._v(" Tenant Tokens")]),e._v(" "),a("h2",{attrs:{id:"_1-summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-summary"}},[e._v("#")]),e._v(" 1. Summary")]),e._v(" "),a("p",[e._v("A "),a("code",[e._v("Tenant token")]),e._v(" is generated by the user code to be used by an end-user when making search queries.")]),e._v(" "),a("p",[e._v("It allows users to have multi-tenant indexes and thus restricts access to documents depending on the end-user making the search request.")]),e._v(" "),a("p",[e._v("A Tenant Token is a JWT containing the information necessary for Meilisearch to verify it and extract permission/rules to apply it to the end user's search.")]),e._v(" "),a("h3",{attrs:{id:"_1-1-key-points"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-key-points"}},[e._v("#")]),e._v(" 1.1. Key Points")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Tenant tokens")]),e._v(" are JWTs generated on the user side by using Meilisearch SDKs or their custom code. "),a("code",[e._v("Tenant tokens")]),e._v(" are not stored nor retrievable on the Meilisearch side.")]),e._v(" "),a("li",[a("code",[e._v("Tenant tokens")]),e._v(" contain rules that ensure that a "),a("code",[e._v("Tenant token")]),e._v(" holder (e.g. an end-user) only has access to documents matching rules chosen at the "),a("code",[e._v("tenant token")]),e._v(" creation.")]),e._v(" "),a("li",[a("code",[e._v("Tenant tokens")]),e._v(" are signed from a Meilisearch "),a("code",[e._v("API key")]),e._v(" resource on the user's code.")]),e._v(" "),a("li",[a("code",[e._v("Tenant tokens")]),e._v(" must not be signed by the master key.")]),e._v(" "),a("li",[a("code",[e._v("Tenant tokens")]),e._v(" cannot be more permissive than the signing "),a("code",[e._v("API key")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("Tenant tokens")]),e._v(" must be signed by an "),a("code",[e._v("API Key")]),e._v(" having the "),a("code",[e._v("search")]),e._v(" action defined.")]),e._v(" "),a("li",[a("code",[e._v("Tenant tokens")]),e._v(" can have different rules for each index accessible by the signing API key. These rules are described in the "),a("code",[e._v("searchRules")]),e._v(" JSON object.")]),e._v(" "),a("li",[e._v("The only rule available in the "),a("code",[e._v("searchRules")]),e._v(" object is the search parameter "),a("code",[e._v("filter")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("Tenant tokens")]),e._v(" are sent to Meilisearch via the "),a("code",[e._v("Authorization")]),e._v(" header like any "),a("code",[e._v("API Keys")]),e._v(" or the master key.")]),e._v(" "),a("li",[e._v("When Meilisearch receives a search query emitted with a "),a("code",[e._v("Tenant token")]),e._v(", the "),a("code",[e._v("tenant token")]),e._v(" is decoded, then the "),a("code",[e._v("searchRules")]),e._v(" are applied for the search request before the search parameters.")])]),e._v(" "),a("h2",{attrs:{id:"_2-motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-motivation"}},[e._v("#")]),e._v(" 2. Motivation")]),e._v(" "),a("p",[a("code",[e._v("Tenant tokens")]),e._v(" are introduced to solve multi-tenant indexes use-case.")]),e._v(" "),a("blockquote",[a("p",[e._v("Multi-Tenant Indexes Definition: It is an index that stores documents that may belong to different tenants. In our case, a tenant within an index can be a user or a company, etc. In general, the data of one tenant should not be accessible by other tenants.")])]),e._v(" "),a("p",[e._v("Users today need to set up workarounds to have multi-tenant indexes. They have to use server code to implement the access restriction logic before requesting Meilisearch. It isn't easy to maintain, to implement, and the performance is not optimal because the frontend code does not communicate directly with Meilisearch.")]),e._v(" "),a("h2",{attrs:{id:"_3-functional-specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-functional-specification"}},[e._v("#")]),e._v(" 3. Functional Specification")]),e._v(" "),a("h3",{attrs:{id:"_3-1-example-solving-multi-tenancy-with-tenant-tokens"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-example-solving-multi-tenancy-with-tenant-tokens"}},[e._v("#")]),e._v(" 3.1. Example: Solving Multi-Tenancy with "),a("code",[e._v("Tenant tokens")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/3692335/151013496-d33ab507-f972-465d-b942-899fc2bd0a22.png",alt:""}})]),e._v(" "),a("p",[a("code",[e._v("Mark")]),e._v(" is a developer for a SaaS platform. He would like to ensure that every end-user can only access their documents at search time.")]),e._v(" "),a("p",[e._v("When an end-user registers, Mark's backend code generates a "),a("code",[e._v("Tenant token")]),e._v(" for that end-user so they can only access their documents at search time.")]),e._v(" "),a("p",[e._v("This tenant-token is signed with a Meilisearch API Key so that Meilisearch can ensure that the tenant-token has been generated from a known entity.")]),e._v(" "),a("p",[e._v("Meilisearch checks if the Tenant Token is authorized to make the search request.")]),e._v(" "),a("p",[e._v("Then Meilisearch extracts the Tenant Token's rules to apply for the search request.")]),e._v(" "),a("h3",{attrs:{id:"_3-2-tenant-token-details"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-tenant-token-details"}},[e._v("#")]),e._v(" 3.2. "),a("code",[e._v("Tenant Token")]),e._v(" Details")]),e._v(" "),a("p",[e._v("Tenant Tokens are JWTs and must respect several conditions to be understandable by a Meilisearch instance.")]),e._v(" "),a("h4",{attrs:{id:"_3-2-1-header-algorithm-and-token-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-header-algorithm-and-token-type"}},[e._v("#")]),e._v(" 3.2.1. Header: Algorithm and token type")]),e._v(" "),a("p",[e._v("The Tenant Token must be signed with one of the following algorithms:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("HS256")])]),e._v(" "),a("li",[a("code",[e._v("HS384")])]),e._v(" "),a("li",[a("code",[e._v("HS512")])])]),e._v(" "),a("p",[e._v("e.g. With "),a("code",[e._v("HS256")])]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"alg"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"HS256"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"typ"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"JWT"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("The secret key that is used to encrypt the JWT token must be the original API Key value (not the UID).")]),e._v(" "),a("h4",{attrs:{id:"_3-2-2-payload-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-payload-data"}},[e._v("#")]),e._v(" 3.2.2. Payload: Data")]),e._v(" "),a("p",[e._v("Meilisearch needs information within the tenant token to check its validity and use it to authorize and perform end-user search requests.")]),e._v(" "),a("h5",{attrs:{id:"_3-2-2-1-validity-information"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-1-validity-information"}},[e._v("#")]),e._v(" 3.2.2.1. Validity Information")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Fields")]),e._v(" "),a("th",[e._v("Required")]),e._v(" "),a("th",[e._v("Description")]),e._v(" "),a("th",[e._v("Comments")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[a("code",[e._v("apiKeyUid")]),e._v(" (Custom claim)")]),e._v(" "),a("td",[e._v("Required")]),e._v(" "),a("td",[e._v("Must contain the "),a("code",[e._v("uid")]),e._v(" field value of the signing "),a("code",[e._v("Meilisearch API key")]),e._v(" used to generate the JWT")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[a("code",[e._v("exp")]),e._v(" (Expiration Time claim)")]),e._v(" "),a("td",[e._v("Optional")]),e._v(" "),a("td",[e._v("A JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time.")]),e._v(" "),a("td",[e._v("If the signing API key expires, the Tenant Token also expires. Thus said, the "),a("code",[e._v("exp")]),e._v(" can't be greater than the expiration date of the signing API key.")])])])]),e._v(" "),a("h6",{attrs:{id:"_3-2-2-1-1-apikeyuid-field"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-1-1-apikeyuid-field"}},[e._v("#")]),e._v(" 3.2.2.1.1. "),a("code",[e._v("apiKeyUid")]),e._v(" field")]),e._v(" "),a("p",[a("code",[e._v("apiKeyUid")]),e._v(" permits to verify that the signing API key of the Token is known and valid within Meilisearch. It must contain the "),a("code",[e._v("uid")]),e._v(" field value of the Meilisearch API key that generates and signs the Tenant Token.")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("apiKeyUid")]),e._v(" can't be generated from the master key, and the "),a("code",[e._v("API Key")]),e._v(" must have the "),a("code",[e._v("search")]),e._v(" action defined to generate a usable tenant token.")]),e._v(" "),a("h6",{attrs:{id:"_3-2-2-1-2-exp-field"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-1-2-exp-field"}},[e._v("#")]),e._v(" 3.2.2.1.2. "),a("code",[e._v("exp")]),e._v(" field")]),e._v(" "),a("p",[a("code",[e._v("exp")]),e._v(" is used to specify the expiration date of the Tenant Token if needed. The format is a JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds.")]),e._v(" "),a("h5",{attrs:{id:"_3-2-2-2-business-logic-information"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-2-business-logic-information"}},[e._v("#")]),e._v(" 3.2.2.2. Business Logic Information")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Fields")]),e._v(" "),a("th",[e._v("Required")]),e._v(" "),a("th",[e._v("Description")]),e._v(" "),a("th",[e._v("Comments")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[a("code",[e._v("searchRules")])]),e._v(" "),a("td",[e._v("Required")]),e._v(" "),a("td",[e._v("This JSON object contains rules to apply for search queries performed with the JWT depending on the searched index. A Tenant Token cannot access more indexes at search time than those defined as accessible by the signing API key.")]),e._v(" "),a("td",[e._v("Let's say an index uses a field to separate documents belonging to one end-user from another one, but another index needs to separate belonging using a different field in its schema. Defining specific search rules per accessible index avoids generating several tenant tokens for an end-user.")])])])]),e._v(" "),a("h6",{attrs:{id:"_3-2-2-2-1-searchrules-json-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-2-1-searchrules-json-object"}},[e._v("#")]),e._v(" 3.2.2.2.1. "),a("code",[e._v("searchRules")]),e._v(" JSON object")]),e._v(" "),a("p",[a("code",[e._v("searchRules")]),e._v(" contains the rules to be enforced at search time for all or specific accessible indexes for the signing API Key.")]),e._v(" "),a("p",[e._v("Here are the accepted formats for the "),a("code",[e._v("searchRules")]),e._v(" property.")]),e._v(" "),a("hr"),e._v(" "),a("blockquote",[a("p",[e._v("In this case, all indexes on which the signing API Key has permissions are searchable by the tenant token without any restrictions.")])]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"searchRules"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"*"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("is equivalent to")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"searchRules"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"*"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token null keyword"}},[e._v("null")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("is equivalent to")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"searchRules"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"*"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("The search is authorized on all accessible indexes from the signing API Key for the Tenant Token without specific rules.")]),e._v(" "),a("hr"),e._v(" "),a("blockquote",[a("p",[e._v("In this case, all searchable indexes from the signing API Key are searchable by the tenant token, and Meilisearch applies the "),a("code",[e._v("filter")]),e._v(" search rule before applying the request search parameters.")])]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"searchRules"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"*"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"filter"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"user_id = 1"')]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("hr"),e._v(" "),a("blockquote",[a("p",[e._v("In this case, if the "),a("code",[e._v("medical_records")]),e._v(" index is searchable from the signing API Key, the tenant token is only authorized to search in the "),a("code",[e._v("medical_records")]),e._v(" index.")])]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"searchRules"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"medical_records"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("is equivalent to")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"searchRules"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"medical_records"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token null keyword"}},[e._v("null")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("is equivalent to")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"searchRules"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"medical_records"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("hr"),e._v(" "),a("blockquote",[a("p",[e._v("In this case, if the "),a("code",[e._v("medical_records")]),e._v(" index is searchable from the signing API Key, the tenant token is only authorized to search in the "),a("code",[e._v("medical_records")]),e._v(" index, and Meilisearch applies the "),a("code",[e._v("filter")]),e._v(" search rule before applying the request search parameters.")])]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"searchRules"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"medical_records"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"filter"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"user_id = 1"')]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("hr"),e._v(" "),a("blockquote",[a("p",[e._v("In this case, if the "),a("code",[e._v("medical_records")]),e._v(" and "),a("code",[e._v("medical_appointments")]),e._v(" indexes are searchable from the signing API Key, the tenant token is only authorized to search in those indexes, and Meilisearch applies the "),a("code",[e._v("filter")]),e._v(" search rule before applying the request search parameters.")])]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"searchRules"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"medical_records"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"filter"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"user_id = 1"')]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"medical_appointments"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"filter"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"user_id = 1 AND accepted = true"')]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("hr"),e._v(" "),a("blockquote",[a("p",[e._v("In this case, all searchable indexes from the signing API Key are searchable, and Meilisearch applies the "),a("code",[e._v("filter")]),e._v(" search rule before applying the request search parameters for all indexes except for the "),a("code",[e._v("medical_appointments")]),e._v(" index. A dedicated "),a("code",[e._v("filter")]),e._v(" search rule is applied when making a search query on this index.")])]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"searchRules"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"*"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"filter"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"user_id = 1"')]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"medical_appointments"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"filter"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"user_id = 1 AND accepted = true"')]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("hr"),e._v(" "),a("blockquote",[a("p",[e._v("The "),a("code",[e._v("filter")]),e._v(" field accepts an array, a string, and the mixed syntax as described in the "),a("RouterLink",{attrs:{to:"/specifications/text/0118-search-api.html#312-filter"}},[e._v("Search Endpoints Specification")]),e._v(".")],1)]),e._v(" "),a("h5",{attrs:{id:"_3-2-2-3-payload-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-3-payload-example"}},[e._v("#")]),e._v(" 3.2.2.3. Payload example")]),e._v(" "),a("p",[e._v("Given a Meilisearch API Key used to sign the JWT from the user code. Here is an example of a valid payload for a tenant token.")]),e._v(" "),a("p",[e._v("e.g. "),a("code",[e._v("Meilisearch API key: rkDxFUHd02193e120218f72cc51a9db62729fdb4003e271f960d1631b54f3426fa8b2595")])]),e._v(" "),a("div",{staticClass:"language-jsonc extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n    "apiKeyUid": "f0ec9882-0184-4303-89f0-d4c4d6912bcf", // The uid field value of the signing Meilisearch API Key\n    "exp": 1641835850, // An expiration date in seconds from 1970-01-01T00:00:00Z UTC\n    "searchRules": { // The searchRules Json Object definition\n        "*": {\n            "filter": "user_id = 1"\n        }\n    }\n}\n')])])]),a("blockquote",[a("p",[e._v("In this example, "),a("code",[e._v('"*"')]),e._v(" allows to specify that no matter which index is searched (among all those accessible by the signing API key that generated the tenant token), the "),a("code",[e._v("filter")]),e._v(" search rule is applied on all search requests.")])]),e._v(" "),a("h3",{attrs:{id:"_3-3-tenant-token-revokation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-tenant-token-revokation"}},[e._v("#")]),e._v(" 3.3. Tenant Token Revokation")]),e._v(" "),a("p",[e._v("It is not possible to revoke a  specific tenant token.")]),e._v(" "),a("p",[e._v("The only way to do so is to "),a("strong",[e._v("delete the API key that signed it")]),e._v(" using the "),a("code",[e._v("DELETE - /keys/:apiKey")]),e._v(" endpoints of Meilisearch.")]),e._v(" "),a("p",[e._v("🚨 "),a("strong",[e._v("Doing this revoke all tenant tokens signed by this API Key.")])]),e._v(" "),a("p",[e._v("Another much more drastic method is to modify the "),a("code",[e._v("master key")]),e._v(" of the Meilisearch instance.")]),e._v(" "),a("p",[e._v("🚨🚨 "),a("strong",[e._v("Doing this regenerate all the API Keys and thus revoke all the tenant tokens generated regardless of the signing API Key.")])]),e._v(" "),a("h2",{attrs:{id:"_4-future-possibilities"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-future-possibilities"}},[e._v("#")]),e._v(" 4. Future Possibilities")]),e._v(" "),a("ul",[a("li",[e._v("Handle more signing methods for the Tenant Token.")]),e._v(" "),a("li",[e._v("Handle more search parameters restrictions in "),a("code",[e._v("searchRules")]),e._v(".")]),e._v(" "),a("li",[e._v("Add a possibility to revoke a specific Tenant Token.")]),e._v(" "),a("li",[e._v("Introduce an endpoint to generate tenant tokens on the Meilisearch side.")])])])}),[],!1,null,null,null);t.default=n.exports}}]);